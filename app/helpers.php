<?php

/**
 * Global helpers file with misc functions.
 */
if (! function_exists('app_name')) {
    /**
     * Helper to grab the application name.
     *
     * @return mixed
     */
    function app_name()
    {
        return config('app.name');
    }
}

if (! function_exists('access')) {
    /**
     * Access (lol) the Access:: facade as a simple function.
     */
    function access()
    {
        return app('access');
    }
}

if (! function_exists('history')) {
    /**
     * Access the history facade anywhere.
     */
    function history()
    {
        return app('history');
    }
}

if (! function_exists('gravatar')) {
    /**
     * Access the gravatar helper.
     */
    function gravatar()
    {
        return app('gravatar');
    }
}

if (! function_exists('includeRouteFiles')) {

    /**
     * Loops through a folder and requires all PHP files
     * Searches sub-directories as well.
     *
     * @param $folder
     */
    function includeRouteFiles($folder)
    {
        try {
            $rdi = new recursiveDirectoryIterator($folder);
            $it = new recursiveIteratorIterator($rdi);

            while ($it->valid()) {
                if (! $it->isDot() && $it->isFile() && $it->isReadable() && $it->current()->getExtension() === 'php') {
                    require $it->key();
                }

                $it->next();
            }
        } catch (Exception $e) {
            echo $e->getMessage();
        }
    }
}

if (! function_exists('getRtlCss')) {

    /**
     * The path being passed is generated by Laravel Mix manifest file
     * The webpack plugin takes the css filenames and appends rtl before the .css extension
     * So we take the original and place that in and send back the path.
     *
     * @param $path
     *
     * @return string
     */
    function getRtlCss($path)
    {
        $path = explode('/', $path);
        $filename = end($path);
        array_pop($path);
        $filename = rtrim($filename, '.css');

        return implode('/', $path).'/'.$filename.'.rtl.css';
    }
}

if (! function_exists('homeRoute')) {

    /**
     * Return the route to the "home" page depending on authentication/authorization status.
     *
     * @return string
     */
    function homeRoute()
    {
        if (access()->allow('view-backend')) {
            return 'admin.dashboard';
        } elseif (auth()->check()) {
            return 'frontend.user.dashboard';
        }

        return 'frontend.index';
    }
}


if (! function_exists('get_lang_from_domain_name'))
{
    function get_lang_from_domain_name($request)
    {
        $url_array = explode('.', parse_url($request->url(), PHP_URL_HOST));
        $subdomain = $url_array[0];

        $languages = ['it', 'ru'];
        $curLang = 'en';

        if (in_array($subdomain, $languages)) {
            $curLang = $subdomain;
        }

        return $curLang;
    }
}

if (! function_exists('random_alphanumeric_key'))
{
    function random_alphanumeric_key($length = 5, $pool = 'ab0cd1ef2gh3ij4kl5mn6op7qr8st9uvwxyz', $extended = false)
    {
        if($extended){
            $pool = '!"№;%:?*()_+=-~/\<>,.[]{}1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
        }
        $pool_count = strlen($pool) - 1;
        $res = '';
        for($i = 0; $i < $length; $i++) {
            $res .= $pool[mt_rand(0, $pool_count)];
        }
        return $res;
    }
}
if (! function_exists('get_random_pass'))
{
    function get_random_pass($length = 6, $extended = false)
    {
        $pool = 'ab0cd1ef2gh3ij4kl5mn6op7qr8st9uvwxyz';
        if($extended){
            $pool = '!№;%:?*()_+=-~/\<>,.[]{}1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
        }
        $pool_count = strlen($pool) - 1;
        $res = '';
        for($i = 0; $i < $length; $i++) {
            $res .= $pool[mt_rand(0, $pool_count)];
        }
        return $res;
    }
}
if ( ! function_exists('cart'))
{
    /**
     * Access (lol) the Access:: facade as a simple function
     */
    function cart()
    {
        return app('cart');
    }
}
if ( ! function_exists('centimeters_conventer'))
{
    function centimeters_conventer($item)
    {
//        $item = '(200/150)';
        if(!empty($item)){
            $findmeArr = ['/','x'];
            $vowels = ['(',')'];
            $flag = false;
            $flagBox = false;
            $foundSibmol = null;
            $itemRes = null;

            foreach ($findmeArr as $findme){
                $flag = stripos($item, $findme);
                $flagBox = stripos($item, '(');
                if($flag){
                    $foundSibmol = $findme;
                    break;
                }
            }
            if($flag){
                $item = str_replace($vowels , "", $item);
                $itemExplode = explode($foundSibmol,$item);
                $itemResArr = [];
                foreach ($itemExplode as $itemExplodeOne){
                    $sum = (float)$itemExplodeOne * 0.39;
                    $itemResArr[] = number_format($sum, 1, '.', ' ');
                }
                if(!empty($itemResArr)){
                    if($flagBox !== false){
                        $itemRes = '('.$itemResArr[0].$foundSibmol.$itemResArr[1].')';
                    }else{
                        $itemRes = $itemResArr[0].$foundSibmol.$itemResArr[1];
                    }
                }
            }else{
                $sum = (float)$item * 0.39;
                $itemRes = $sum;
            }

            return $itemRes;
        }
        return null;
    }
}